#include "../../include/synaptic.hpp"

#include <vector>
#include <memory>
#include <gtest/gtest.h>
#include <stdexcept>

using namespace synaptic;

TEST(TensorTest, MatmulOfTwoTensors)
{
    auto t1 = std::make_shared<tensor<float>>(std::vector<int>{2, 5});
    auto t2 = std::make_shared<tensor<float>>(std::vector<int>{5, 3});
    t1->data = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    t2->data = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0};

    auto res = tensor<float>::matmul(t1, t2);
    std::vector<float> expected = {
        135., 150., 165.,
        310., 350., 390.};

    for (int i = 0; i < res->total; i++)
    {
        EXPECT_FLOAT_EQ(res->data[i], expected[i]);
    }
}

TEST(TensorTest, MatmulOfTwoTensors2)
{
    auto t1 = std::make_shared<tensor<float>>(std::vector<int>{4, 16});
    auto t2 = std::make_shared<tensor<float>>(std::vector<int>{16, 8});
    t1->data = {0.7947,  2.2552,  1.7987,  0.2173, -0.2007, -0.2697,  2.2409, -1.7937,
          1.2699, -2.0114,  0.8219,  1.7029, -0.5507,  1.2172, -2.0688,  0.1944,
        -0.3662, -1.7862, -0.8691, -1.3827,  0.7215, -0.8367,  0.1207,  0.7202,
          1.3027, -0.3992,  0.3709,  0.2121, -0.6236,  0.4287,  0.4370,  0.5683,
        -0.9588, -1.2486, -0.3867,  1.7245, -1.2585,  1.0769, -0.7895, -1.3506,
         -0.0909,  0.7843,  0.5003,  1.2313,  0.9482, -0.6306, -0.5712,  1.0591,
        -0.0910,  0.0466, -0.0740, -1.4227, -1.1937,  1.0114,  0.1593, -1.1222,
         -0.1356,  0.1111, -0.3964,  0.1943, -0.8010,  0.8493, -0.7296, -0.4427};
    t2->data = {-0.1831, -0.5941, -2.1423,  0.6470, -1.9096, -1.5325, -0.8887,  0.4184,
        -0.3480, -1.4972, -0.4939, -0.2192, -0.6429,  1.7565,  3.3665, -3.1223,
        -0.0897,  0.1527,  2.5006,  0.6716, -0.1376, -0.4592, -0.1836, -0.6894,
        -2.3551, -0.2481, -0.0332,  0.1503,  1.5796, -0.1008, -0.7422, -0.4209,
        -0.7018, -0.2460,  2.4865,  0.0415, -1.6818, -1.3795, -0.9458,  0.4199,
        -0.7896, -0.1290,  0.2986, -0.0240, -0.4687, -0.3976, -1.3412,  1.1529,
         0.5931, -0.4881, -1.5980,  0.9319, -0.6085, -0.5163,  1.0123, -1.9705,
        -1.8683,  0.6434,  1.2046, -1.3033, -1.0444, -0.4328, -0.2253, -0.1242,
         0.5753,  0.7543,  0.5833, -1.0860,  0.9659, -0.0491, -1.4239, -0.6494,
         2.7625,  1.2143, -0.6385, -0.5964, -1.6864, -2.1905,  0.2225,  0.5538,
         0.1962,  0.4509,  0.6631, -0.5610, -0.7332, -0.6361, -0.0164, -0.7739,
         2.4941,  0.3851,  0.8992, -1.3817, -3.5309, -0.2755,  0.8042, -0.8554,
         1.7699,  0.6355,  0.0369, -0.4293,  0.2913,  0.4181,  1.0567, -0.6670,
        -0.6363, -0.4247,  0.4555,  1.5640, -1.9084, -0.3797, -0.7853,  0.2864,
        -1.7733,  0.8100, -0.7230, -0.6229, -0.9872,  1.0595,  0.6782, -1.3748,
         1.8473, -1.4137,  0.9448,  1.7985,  1.8109,  0.1995,  0.7018,  0.3501};

    auto res = tensor<float>::matmul(t1, t2);
    std::vector<float> expected = {
        5.2917,  -9.0672,   1.6682,   6.4694,  -3.9836,   2.4052,   5.9142,
         -13.0313,
          2.0504,   3.1562,   3.6029,  -1.4030,  -1.3553,  -2.4054,  -6.1817,
           4.2171,
          9.0032,   2.1333,   0.5201,  -0.8843,   6.7503,  -0.5487,  -2.1700,
           4.8703,
          4.7417,  -1.2167,  -4.0102,   2.5700,  -2.1339,   0.4900,  -0.4446,
           2.8725};

    for (int i = 0; i < res->total; i++)
    {
        EXPECT_NEAR(res->data[i], expected[i],0.001);
    }
}

TEST(TensorTest, MatmulOfTwoTensorsBackpropCheck)
{
    auto t1 = std::make_shared<tensor<float>>(std::vector<int>{2, 5});
    auto t2 = std::make_shared<tensor<float>>(std::vector<int>{5, 3});
    t1->data = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    t2->data = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                12.0, 13.0, 14.0, 15.0};

    auto res = tensor<float>::matmul(t1, t2);
    res->backprop();
    std::vector<float> expected1 = {
        6., 15., 24., 33., 42.,
         6., 15., 24., 33., 42.};
    std::vector<float> expected2={
         7.,  7.,  7.,
         9.,  9.,  9.,
        11., 11., 11.,
        13., 13., 13.,
        15., 15., 15.
    };
    for (int i = 0; i < t1->total; i++)
    {
        EXPECT_FLOAT_EQ(t1->grad[i], expected1[i]);
    }

    for (int i = 0; i < t2->total; i++)
    {
        EXPECT_FLOAT_EQ(t2->grad[i], expected2[i]);
    }
}

TEST(TensorTest, MatmulOfTwoTensorsBackpropCheck2)
{
    auto t1 = std::make_shared<tensor<float>>(std::vector<int>{4, 16});
    auto t2 = std::make_shared<tensor<float>>(std::vector<int>{16, 8});
    t1->data = {0.7947,  2.2552,  1.7987,  0.2173, -0.2007, -0.2697,  2.2409, -1.7937,
          1.2699, -2.0114,  0.8219,  1.7029, -0.5507,  1.2172, -2.0688,  0.1944,
        -0.3662, -1.7862, -0.8691, -1.3827,  0.7215, -0.8367,  0.1207,  0.7202,
          1.3027, -0.3992,  0.3709,  0.2121, -0.6236,  0.4287,  0.4370,  0.5683,
        -0.9588, -1.2486, -0.3867,  1.7245, -1.2585,  1.0769, -0.7895, -1.3506,
         -0.0909,  0.7843,  0.5003,  1.2313,  0.9482, -0.6306, -0.5712,  1.0591,
        -0.0910,  0.0466, -0.0740, -1.4227, -1.1937,  1.0114,  0.1593, -1.1222,
         -0.1356,  0.1111, -0.3964,  0.1943, -0.8010,  0.8493, -0.7296, -0.4427};
    t2->data = {-0.1831, -0.5941, -2.1423,  0.6470, -1.9096, -1.5325, -0.8887,  0.4184,
        -0.3480, -1.4972, -0.4939, -0.2192, -0.6429,  1.7565,  3.3665, -3.1223,
        -0.0897,  0.1527,  2.5006,  0.6716, -0.1376, -0.4592, -0.1836, -0.6894,
        -2.3551, -0.2481, -0.0332,  0.1503,  1.5796, -0.1008, -0.7422, -0.4209,
        -0.7018, -0.2460,  2.4865,  0.0415, -1.6818, -1.3795, -0.9458,  0.4199,
        -0.7896, -0.1290,  0.2986, -0.0240, -0.4687, -0.3976, -1.3412,  1.1529,
         0.5931, -0.4881, -1.5980,  0.9319, -0.6085, -0.5163,  1.0123, -1.9705,
        -1.8683,  0.6434,  1.2046, -1.3033, -1.0444, -0.4328, -0.2253, -0.1242,
         0.5753,  0.7543,  0.5833, -1.0860,  0.9659, -0.0491, -1.4239, -0.6494,
         2.7625,  1.2143, -0.6385, -0.5964, -1.6864, -2.1905,  0.2225,  0.5538,
         0.1962,  0.4509,  0.6631, -0.5610, -0.7332, -0.6361, -0.0164, -0.7739,
         2.4941,  0.3851,  0.8992, -1.3817, -3.5309, -0.2755,  0.8042, -0.8554,
         1.7699,  0.6355,  0.0369, -0.4293,  0.2913,  0.4181,  1.0567, -0.6670,
        -0.6363, -0.4247,  0.4555,  1.5640, -1.9084, -0.3797, -0.7853,  0.2864,
        -1.7733,  0.8100, -0.7230, -0.6229, -0.9872,  1.0595,  0.6782, -1.3748,
         1.8473, -1.4137,  0.9448,  1.7985,  1.8109,  0.1995,  0.7018,  0.3501};

    auto res = tensor<float>::matmul(t1, t2);
    res->backprop();
    std::vector<float> expected1 = {
        -6.1850, -1.2004,  1.7655, -2.1703, -2.0071, -1.6986, -2.6442, -3.1503,
         -0.3296, -0.3588, -1.4104, -1.4609,  3.1121, -1.8285, -2.9336,  6.2393,
        -6.1850, -1.2004,  1.7655, -2.1703, -2.0071, -1.6986, -2.6442, -3.1503,
         -0.3296, -0.3588, -1.4104, -1.4609,  3.1121, -1.8285, -2.9336,  6.2393,
        -6.1850, -1.2004,  1.7655, -2.1703, -2.0071, -1.6986, -2.6442, -3.1503,
         -0.3296, -0.3588, -1.4104, -1.4609,  3.1121, -1.8285, -2.9336,  6.2393,
        -6.1850, -1.2004,  1.7655, -2.1703, -2.0071, -1.6986, -2.6442, -3.1503,
         -0.3296, -0.3588, -1.4104, -1.4609,  3.1121, -1.8285, -2.9336,  6.2393};
    std::vector<float> expected2={
         -0.6213, -0.6213, -0.6213, -0.6213, -0.6213, -0.6213, -0.6213, -0.6213,
        -0.7330, -0.7330, -0.7330, -0.7330, -0.7330, -0.7330, -0.7330, -0.7330,
         0.4689,  0.4689,  0.4689,  0.4689,  0.4689,  0.4689,  0.4689,  0.4689,
        -0.8637, -0.8637, -0.8637, -0.8637, -0.8637, -0.8637, -0.8637, -0.8637,
        -1.9314, -1.9314, -1.9314, -1.9314, -1.9314, -1.9314, -1.9314, -1.9314,
         0.9818,  0.9818,  0.9818,  0.9818,  0.9818,  0.9818,  0.9818,  0.9818,
         1.7313,  1.7313,  1.7313,  1.7313,  1.7313,  1.7313,  1.7313,  1.7313,
        -3.5462, -3.5462, -3.5462, -3.5462, -3.5462, -3.5462, -3.5462, -3.5462,
         2.3460,  2.3460,  2.3460,  2.3460,  2.3460,  2.3460,  2.3460,  2.3460,
        -1.5152, -1.5152, -1.5152, -1.5152, -1.5152, -1.5152, -1.5152, -1.5152,
         1.2968,  1.2968,  1.2968,  1.2968,  1.2968,  1.2968,  1.2968,  1.2968,
         3.3406,  3.3406,  3.3406,  3.3406,  3.3406,  3.3406,  3.3406,  3.3406,
        -1.0271, -1.0271, -1.0271, -1.0271, -1.0271, -1.0271, -1.0271, -1.0271,
         1.8646,  1.8646,  1.8646,  1.8646,  1.8646,  1.8646,  1.8646,  1.8646,
        -2.9325, -2.9325, -2.9325, -2.9325, -2.9325, -2.9325, -2.9325, -2.9325,
         1.3792,  1.3792,  1.3792,  1.3792,  1.3792,  1.3792,  1.3792,  1.3792
    };
    for (int i = 0; i < t1->total; i++)
    {
        EXPECT_NEAR(t1->grad[i], expected1[i],0.001);
    }

    for (int i = 0; i < t2->total; i++)
    {
        EXPECT_NEAR(t2->grad[i], expected2[i],0.001);
    }
}


// Test cases where the shape mismatch triggers an assertion failure
TEST(TensorAssertionFailureTest, TensorMatmulShapeMismatch)
{
    auto t1 = std::make_shared<tensor<int>>(std::vector<int>{2, 4});
    auto t2 = std::make_shared<tensor<int>>(std::vector<int>{3, 2});
    t1->data = {1, 2, 3, 4, 5, 6 ,7 ,8};
    t2->data = {1, 2, 3, 4, 5, 6};

    EXPECT_THROW({ auto res = tensor<int>::matmul(t1,t2); }, std::runtime_error);
}

TEST(TensorAssertionFailureTest, TensorMatmulWithScalarShapeMismatch)
{
    auto t1 = std::make_shared<tensor<float>>(std::vector<int>{3});
    auto t2 = std::make_shared<tensor<float>>(std::vector<int>{1, 3});
    t1->data = {1.0f, 2.0f, 3.0f};
    t2->data = {1.0f, 2.0f, 3.0f};

    EXPECT_THROW({ auto res = t1 * t2; }, std::runtime_error);
}